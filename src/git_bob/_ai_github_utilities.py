# This module contains utility functions for interacting with GitHub issues and pull requests using AI.
# It includes functions for setting up AI remarks, commenting on issues, reviewing pull requests, and solving issues.

from ._utilities import catch_error
from ._logger import Log
import json

SYSTEM_PROMPT = """You are an extremely skilled python developer. Your name is git-bob. 
You can solve programming tasks and review code.
When asked to solve a specific problem, you keep your code changes minimal and only solve the problem at hand.
You cannot execute code. 
You cannot retrieve information from other sources. 
Do not claim anything that you don't know.
In case you are asked to review code, you focus on the quality of the code. 
"""

def setup_ai_remark():
    """
    Set up the AI remark for comments.

    Returns
    -------
    str
        The AI remark string.
    """
    from git_bob import __version__
    from ._utilities import get_llm_name
    model = get_llm_name()
    return f"<sup>This message was generated by [git-bob](https://github.com/haesleinhuepf/git-bob) (version: {__version__}, model: {model}), an experimental AI-based assistant. It can make mistakes and has [limitations](https://github.com/haesleinhuepf/git-bob?tab=readme-ov-file#limitations). Check its messages carefully.</sup>"


@catch_error
def comment_on_issue(repository, issue, prompt_function):
    """
    Comment on a GitHub issue using a prompt function.

    Parameters
    ----------
    repository : str
        The full name of the GitHub repository.
    issue : int
        The issue number to comment on.
    prompt_function : function
        The function to generate the comment.
    """
    Log().log(f"-> comment_on_issue({repository}, {issue})")
    from ._github_utilities import get_conversation_on_issue, add_comment_to_issue

    ai_remark = setup_ai_remark()

    discussion = get_conversation_on_issue(repository, issue)
    print("Discussion:", discussion)

    comment = prompt_function(f"""
{SYSTEM_PROMPT}
Respond to a github issue. Its entire discussion is given.

## Discussion

{discussion}

## Your task

Respond to the discussion above. 
Do NOT explain your response or anything else. 
Just respond to the discussion.
""")

    print("comment:", comment)

    add_comment_to_issue(repository, issue, f"""        
{ai_remark}

{comment}
""")


@catch_error
def review_pull_request(repository, issue, prompt_function):
    """
    Review a GitHub pull request using a prompt function.

    Parameters
    ----------
    repository : str
        The full name of the GitHub repository.
    issue : int
        The pull request number to review.
    prompt_function : function
        The function to generate the review comment.
    """
    Log().log(f"-> review_pull_request({repository}, {issue})")
    from ._github_utilities import get_conversation_on_issue, add_comment_to_issue, get_diff_of_pull_request

    ai_remark = setup_ai_remark()

    discussion = get_conversation_on_issue(repository, issue)
    print("Discussion:", discussion)

    file_changes = get_diff_of_pull_request(repository, issue)

    print("file_changes:", file_changes)

    comment = prompt_function(f"""
{SYSTEM_PROMPT}
Generate a response to a github pull-request. 
Given are the discussion on the pull-request and the changed files.
Check if the discussion reflects what was changed in the files.

## Discussion

{discussion}

## Changed files

{file_changes}

## Your task

Review this pull-request and contribute to the discussion. 

Do NOT explain your response or anything else. 
Just respond to the discussion.
""")

    print("comment:", comment)

    add_comment_to_issue(repository, issue, f"""        
{ai_remark}

{comment}
""")


@catch_error
def summarize_github_issue(repository, issue, prompt_function):
    """
    Summarize a GitHub issue.

    Parameters
    ----------
    repository : str
        The full name of the GitHub repository.
    issue : int
        The issue number to summarize.
    llm_model : str
        The language model to use for generating the summary.
    """
    Log().log(f"-> summarize_github_issue({repository}, {issue})")
    from ._github_utilities import get_github_issue_details

    issue_conversation = get_github_issue_details(repository, issue)

    summary = prompt_function(f"""
Summarize the most important details of this issue #{issue} in the repository {repository}. 
In case filenames, variables and code-snippetes are mentioned, keep them in the summary, they are very important.

## Issue to summarize:
{issue_conversation}
""")

    print("Issue summary:", summary)
    return summary


@catch_error
def create_or_modify_file(repository, issue, filename, branch_name, issue_summary, prompt_function):
    """
    Create or modify a file in a GitHub repository.

    Parameters
    ----------
    repository : str
        The full name of the GitHub repository.
    issue : int
        The issue number to solve.
    filename : str
        The name of the file to create or modify.
    branch_name : str
        The name of the branch to create or modify the file in.
    issue_summary : str
        The summary of the issue to solve.
    """
    Log().log(f"-> create_or_modify_file({repository}, {issue}, {filename}, {branch_name})")
    from ._github_utilities import get_repository_file_contents, write_file_in_new_branch, create_branch, check_if_file_exists, get_file_in_repository
    from ._utilities import remove_outer_markdown, split_content_and_summary

    if check_if_file_exists(repository, branch_name, filename):
        file_content = get_file_in_repository(repository, branch_name, filename).decoded_content.decode()
        print(filename, "will be overwritten")
        if filename.endswith('.ipynb'):
            notebook = json.loads(file_content)
            for cell in notebook['cells']:
                if cell['cell_type'] == 'code':
                    cell['outputs'] = []
                    cell['execution_count'] = None
            # Adding an exercise cell for students to implement what they have learned
            notebook['cells'].append({
                "cell_type": "markdown",
                "metadata": {},
                "source": [
                    "## Exercise\n",
                    "Implement the concepts you have learned in the notebook."
                ]
            })
            file_content = json.dumps(notebook, indent=1)
        file_content_instruction = f"""
Modify the file "{filename}" to solve the issue #{issue}.
Keep your modifications absolutely minimal.

That's the file "{filename}" content you will find in the file:
```
{file_content}
```

## Your task
Modify content of the file "{filename}" to solve the issue above.
Keep your modifications absolutely minimal.
"""
    else:
        print(filename, "will be created")
        file_content_instruction = f"""
Create the file "{filename}" to solve the issue #{issue}.

## Your task
Generate content for the file "{filename}" to solve the issue above.
Keep it short.
"""

    response = prompt_function(f"""
{SYSTEM_PROMPT}
Given a github issue summary (#{issue}) and optionally file content (filename {filename}), modify the file content or create the file content to solve the issue.

## Issue {issue} Summary

{issue_summary}

## File {filename} content

{file_content_instruction}


Respond ONLY the content of the file and afterwards a single line summarizing the changes you made (without mentioning the issue).
""")

    new_content, commit_message = split_content_and_summary(response)


    print("New file content", new_content)
    print("Summary", commit_message)

    write_file_in_new_branch(repository, branch_name, filename, new_content + "\n", commit_message)

    return commit_message


@catch_error
def solve_github_issue(repository, issue, llm_model, prompt_function):
    """
    Attempt to solve a GitHub issue by modifying a single file and sending a pull-request.

    Parameters
    ----------
    repository : str
        The full name of the GitHub repository.
    issue : int
        The issue number to solve.
    llm_model : str
        The language model to use for generating the solution.
    """
    # modified from: https://github.com/ScaDS/generative-ai-notebooks/blob/main/docs/64_github_interaction/solving_github_issues.ipynb

    Log().log(f"-> solve_github_issue({repository}, {issue})")

    from ._github_utilities import get_github_issue_details, list_repository_files, get_repository_file_contents, write_file_in_new_branch, send_pull_request, add_comment_to_issue, create_branch, check_if_file_exists, get_diff_of_branches
    from ._utilities import remove_outer_markdown, split_content_and_summary, ErrorReporting
    import json

    ai_remark = setup_ai_remark()

    issue_summary = summarize_github_issue(repository, issue, prompt_function)

    all_files = "* " + "\n* ".join(list_repository_files(repository))

    relevant_files = remove_outer_markdown(prompt_function(f"""
Given a list of files in the repository {repository} and a github issues description (# {issue}), determine which files are relevant to solve the issue.

## Files in the repository

{all_files}

## Github Issue #{issue} Summary

{issue_summary}

## Your task
Which of these files are relevant for issue #{issue} ? Keep the list short.
You can also consider files which do not exist yet. 
Respond with the filenames as JSON list.
"""))

    if "[" in relevant_files:
        relevant_files = "[" +  relevant_files.split("[")[1]
    if "]" in relevant_files:
        relevant_files = relevant_files.split("]")[0] + "]"

    print("JSON relevant filenames:", relevant_files)

    filenames = json.loads(relevant_files)

    # create a new branch
    branch_name = create_branch(repository)

    print("Created branch", branch_name)

    ErrorReporting.status = False

    errors = []
    commit_messages = []
    for filename in filenames:
        if filename.startswith(".github/workflows"):
            # skip github workflows
            continue
        try:
            message = filename + ":" + create_or_modify_file(repository, issue, filename, branch_name, issue_summary, prompt_function)
            commit_messages.append(message)
        except Exception as e:
            errors.append(f"Error processing {filename}" + str(e))

    ErrorReporting.status = True

    error_messages = ""
    if len(errors) > 0:
        error_messages = "The following errors occurred:\n\n* " + "\n* ".join(errors) + "\n"

    # get a diff of all changes
    diffs_prompt = get_diff_of_branches(repository, branch_name)

    # summarize the changes
    commit_messages_prompt = "* " + "\n* ".join(commit_messages)
    pull_request_summary = prompt_function(f"""
{SYSTEM_PROMPT}
Given a list of commit messages and a git diff, summarize the changes you made in the files.
You modified the repository {repository} to solve the issue #{issue}, which is also summarized below.

## Issue Summary

{issue_summary}

## Commit messages
You committed these changes to these files

{commit_messages_prompt}

## Git diffs
The following changes were made in the files:

{diffs_prompt}

## Your task
Summarize the changes above to a one paragraph line Github pull-request message. 
Afterwards, summarize the summary in a single line, which will become the title of the pull-request.
Do not add headnline or any other formatting. Just respond with the paragraphe and the title in a new line below.
""")

    pull_request_description, pull_request_title = split_content_and_summary(pull_request_summary)

    send_pull_request(repository, branch_name, pull_request_title, pull_request_description + "\n\ncloses #" + str(issue))
