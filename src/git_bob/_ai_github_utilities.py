from ._utilities import remove_indentation

SYSTEM_PROMPT = """You are an extremely skilled python developer. Your name is git-bob."""
def setup_ai_remark():
    from git_bob import __version__
    return f"<sup>This message was generated by [git-bob](https://github.com/haesleinhuepf/git-bob) {__version__}, an AI-based assistant.</sup>"


def comment_on_issue(repository, issue, prompt_function):

    print(f"-> comment_on_issue({repository}, {issue})")
    from ._github_utilities import get_conversation_on_issue, add_comment_to_issue

    ai_remark = setup_ai_remark()

    discussion = get_conversation_on_issue(repository, issue)
    print("Discussion:", discussion)

    comment = prompt_function(remove_indentation(f"""
    {SYSTEM_PROMPT}
    Respond to a github issue. Its entire discussion is given.

    ## Discussion

    {discussion}

    ## Your task

    Respond to the discussion above. 
    Do NOT explain your response or anything else. 
    Just respond to the discussion.
    """))

    print("comment:", comment)

    add_comment_to_issue(repository, issue, remove_indentation(f"""        
    {ai_remark}

    {comment}
    """))
def review_pull_request(repository, issue, prompt_function):

    print(f"-> review_pull_request({repository}, {issue})")
    from ._github_utilities import get_conversation_on_issue, add_comment_to_issue, get_diff_of_pull_request

    ai_remark = setup_ai_remark()

    discussion = get_conversation_on_issue(repository, issue)
    print("Discussion:", discussion)

    file_changes = get_diff_of_pull_request(repository, issue)

    print("file_changes:", file_changes)

    comment = prompt_function(remove_indentation(f"""
    {SYSTEM_PROMPT}
    Generate a response to a github pull-request. 
    Given are the discussion on the pull-request and the changed files.

    ## Discussion

    {discussion}

    ## Changed files

    {file_changes}

    ## Your task

    Review this pull-request and contribute to the discussion. 
    Do not give general adive, but focus on the pull-request and the changed files.
    If relevant, write critical feedback, e.g. if new bugs may have been introduced, typos, etc.
    If relevant, help the author to improve the pull-request, e.g. with better variable names, better comments etc.
    Do NOT explain your response or anything else. 
    Just respond to the discussion.
    """))

    print("comment:", comment)

    add_comment_to_issue(repository, issue, remove_indentation(f"""        
    {ai_remark}

    {comment}
    """))


def solve_github_issue(repository, issue, llm_model):
    """Attempt to solve a github issue by modifying a single file and sending a pull-request."""
    # modified from: https://github.com/ScaDS/generative-ai-notebooks/blob/main/docs/64_github_interaction/solving_github_issues.ipynb

    print(f"-> solve_github_issue({repository}, {issue})")

    from ._github_utilities import get_github_issue_details, list_repository_files, get_repository_file_contents, write_file_in_new_branch, send_pull_request, add_comment_to_issue, create_branch, check_if_file_exists
    from ._utilities import remove_outer_markdown
    from blablado import Assistant

    ai_remark = setup_ai_remark()

    print(f"-> solve_github_issue({repository}, {issue})")
    assistant = Assistant(model=llm_model)
    assistant.register_tool(get_github_issue_details)
    assistant.register_tool(list_repository_files)
    assistant.register_tool(get_repository_file_contents)
    assistant.register_tool(create_branch)
    assistant.register_tool(write_file_in_new_branch)
    assistant.register_tool(send_pull_request)

    assistant.do(f"Tell me the most important details of issue #{issue} in the repository {repository}")
    assistant.do(f"List all files in the repository {repository}")
    filenames_json = remove_outer_markdown(assistant.tell("Which of these files might be relevant for issue #{issue} ? You can also consider files which do not exist yet. Respond ONLY the filenames  as JSON list."))

    print("Related filenames", filenames_json)

    # parse the filenames_json into list:
    import json
    filenames = json.loads(filenames_json)

    branch_name = assistant.tell(f"Create a new branch on repository {repository}. Respond ONLY the branch name.")
    branch_name = branch_name.strip().strip('"')

    print("Created branch", branch_name)

    for filename in filenames:
        if check_if_file_exists(repository, filename):
            print(filename, "will be overwritten")
            assistant.do(f"Load the entire content of {filename} from the repository {repository} branch {branch_name}.")
            assistant.do(f"Modify the file content of {filename} according to the github issue description at the very beginning and write it to repository {repository} branch {branch_name}.")
        else:
            print(filename, "will be created")
            assistant.do(
                f"Write the specified file content into {filename} and write it to repository {repository} branch {branch_name}.")

    add_comment_to_issue(repository, issue, remove_indentation(f"""
    {ai_remark}
    
    I created a branch with a potential solution [here](https://github.com/{repository}/tree/{branch_name}). I will attempt to send a pull-request.
    """))
    assistant.do(f"Send a pull-request of the branch {branch_name} in repository {repository} explaining in detail what we changed. Finish the message with 'closes #{issue}'.")
